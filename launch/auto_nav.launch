
<!--//////////////////////////////////////////////////
Author:         Minh-Chung HOANG
Email:          MINHCHUN001@e.ntu.edu.sg
Last modified:  Wed 4th Jul 16
//////////////////////////////////////////////////-->

<launch>
    <!-- ********** PARAMS & ARGS ********** -->
    <arg name="enable_indoor_slam" default="false"/>
    <arg name="enable_octomap" default="false"/>
    <param name="pub_map_odom_transform" value="true"/>

    <arg name="base_frame" value="base_frame"/>     <!-- default="base_footprint" -->
    <arg name="odom_frame" value="base_frame"/>     <!-- default="nav" -->

    <arg name="tf_map_scanmatch_transform_frame_name" default="scanmatcher_frame"/>

    <arg name="pub_map_odom_transform" default="true"/>
    <arg name="scan_subscriber_queue_size" default="5"/>
    <arg name="scan_topic" default="/scan"/>
    <arg name="map_size" default="2048"/>           <!-- default="2048" -->

    <!-- ********** ROSCORE ********** -->
    <master auto="start"/>

    <!-- ********** UGV BRING UP ********** 
    <include file="$(find teleop_ugv)/launch/ugv_bringup.launch"/>  
    -->
    <!-- ********** LASER & UTILS ********** -->

    <node pkg="hokuyo_node" type="hokuyo_node" name="head_hokuyo">
        <param name="min_ang" value="-1.5708"/>
        <param name="max_ang" value="1.5708"/>
        <param name="port" value="/dev/UGV.HEAD.HOKUYO"/>
        <param name="frame_id" value="laser_head"/>
        <remap from="scan" to="scan_head"/>
    </node>

    <node pkg="hokuyo_node" type="hokuyo_node" name="base_hokuyo" 
        if="$(arg enable_indoor_slam)">
        <param name="min_ang" value="-1.5708"/>
        <param name="max_ang" value="1.5708"/>
        <param name="port" value="/dev/UGV.BASE.HOKUYO"/>
        <param name="frame_id" value="laser_base"/>
    </node>
<!-- 
    <node pkg="hector_imu_attitude_to_tf" type="imu_attitude_to_tf_node" name="imu_attitude_to_tf_node" output="screen">
        <remap from="imu_topic" to="/scan_head/virtual_imu" />
        <param name="base_stabilized_frame" type="string" value="base_frame"/>  
        <param name="base_frame" type="string" value="base_non_stabilized"/> 
    </node>
 -->

    <!-- ********** SLAM ********** -->
    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" 
        output="screen" if="$(arg enable_indoor_slam)">

        <!-- Frame names -->
        <param name="map_frame" value="world" />
        <param name="base_frame" value="$(arg base_frame)" />
        <param name="odom_frame" value="$(arg odom_frame)" />

        <!-- Tf use -->
        <param name="use_tf_scan_transformation" value="true"/>
        <param name="use_tf_pose_start_estimate" value="false"/>
        <param name="pub_map_odom_transform" value="$(arg pub_map_odom_transform)"/>

        <!-- Map size / start point -->
        <param name="map_resolution" value="0.050"/>
        <param name="map_size" value="$(arg map_size)"/>
        <param name="map_start_x" value="0.5"/>
        <param name="map_start_y" value="0.5" />
        <param name="map_multi_res_levels" value="2" />

        <!-- Map update parameters -->
        <param name="update_factor_free" value="0.4"/>
        <param name="update_factor_occupied" value="0.9" />
        <param name="map_update_distance_thresh" value="0.4"/>
        <param name="map_update_angle_thresh" value="0.06" />
        <param name="laser_z_min_value" value="-1.0" />
        <param name="laser_z_max_value" value="1.0" />

        <!-- Advertising config -->
        <param name="advertise_map_service" value="true"/>

        <param name="scan_subscriber_queue_size" value="$(arg scan_subscriber_queue_size)"/>
        <param name="scan_topic" value="$(arg scan_topic)"/>

        <!-- Debug parameters -->
        <!--
          <param name="output_timing" value="false"/>
          <param name="pub_drawings" value="true"/>
          <param name="pub_debug_output" value="true"/>
        -->
        <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)" />
    </node>

    <!-- ********** VISION ********** -->
    
    <node pkg="map_test" type="cloud_builder" name="cloud_builder" 
        output="screen" respawn="false"/>
    <node pkg="map_test" type="map_builder_2" name="map_builder" 
        output="screen"/>
    <node pkg="map_test" type="object_detector" name="object_detector"
        output="screen">
        <param name="cam_frame_name" value="fixed_cam"/>
        <param name="cam_namespace" value="fixed_cam"/>
    </node>
    <node pkg="map_test" type="object_manager_2" name="object_manager"
        output="screen"/>

    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server"
        if="$(arg enable_octomap)">
        <param name="resolution" value="0.05" />
        <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
        <param name="frame_id" type="string" value="map"/>
        <!-- maximum range to integrate (speedup!) -->
        <param name="sensor_model/max_range" value="30.0" />
        <!-- data source to integrate (PointCloud2) -->
        <remap from="cloud_in" to="/point_cloud_raw_laser" />
    </node>

<!--     <node pkg="opencv_test" type="camera_timer"     name="camera_timer">
        <rosparam>
            camera_index: 1
        </rosparam>
    </node>
    <node pkg="opencv_test" type="qr_decoder"       name="qr_decoder"       output="screen" respawn="false">
        <param name="estimate_pose"             value="false"/>
        <param name="frame_name_world"          value="map"/>
        <param name="frame_name_qr"             value="qr_independent" />
        <param name="frame_name_cam_from_qr"    value="cam_frame_qr_predicted"/>

        <param name="frame_name_cam"            value="cam_frame" />
        <param name="frame_name_qr_from_cam"    value="qr" />
    <node/>
    <node pkg="opencv_test" type="pose_publisher"   name="pose_publisher">
        <rosparam>
            frame_parent:    "/map"
            frame_child:  "/base_frame"
            frequency_publish: 10
            using_unit_degree: true
        </rosparam>
    </node>
    <node pkg="tf" type="static_transform_publisher" name="camera_2_chassis" args="0 0 0 -1.57 0 0 /camera /chassis 100"/>
    <node pkg="tf" type="static_transform_publisher" name="chassis_2_fcu" args="0 0 0 0 0 0 /world /fcu 100"/>

 -->
    <!-- ********** NAVIGATION ********** -->
    <include file="$(find hector_geotiff)/launch/geotiff_mapper.launch">
        <arg name="trajectory_source_frame_name" value="/base_frame"/>
    </include>    

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" 
        output="screen">
        
        <rosparam file="$(find teleop_ugv)/param/costmap_common_params.yaml" 
            command="load" ns="global_costmap"/>
        <rosparam file="$(find teleop_ugv)/param/costmap_common_params.yaml" 
            command="load" ns="local_costmap"/>
        <rosparam file="$(find teleop_ugv)/param/local_costmap_params.yaml" 
            command="load"/>
        <rosparam file="$(find teleop_ugv)/param/global_costmap_params.yaml" 
            command="load"/>
        <rosparam file="$(find teleop_ugv)/param/base_local_planner_params.yaml" 
            command="load"/>
        <rosparam file="$(find teleop_ugv)/param/move_base_params.yaml" 
            command="load"/>
    </node>
</launch>